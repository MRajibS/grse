import json
from helpers import *
from app import *
from app.Models import *
from flask.views import MethodView
from flask import current_app, Blueprint
from app.auth.admin_auth.utils import user_Required
from datetime import datetime
#from app.m_models import *
from app.m_models import database_connect_mongo
from bson.json_util import dumps
from sqlalchemy import asc, desc
Terminals_view = Blueprint('Terminals_view', __name__)


def terminal_status(terminal):
    data = {}
    data["online"] = list()
    data["offline"] = list()
    data["nolog"] = list()
    db = database_connect_mongo()
    db = db["terminal_log"]
    offline = db.find({"Terminal_id": terminal, "Status": "Disconnected"}).limit(1).sort("Date", -1)
    online = db.find({"Terminal_id": terminal, "Status": "Connected"}).limit(1).sort("Date", -1)
    if len(json.loads(dumps(online))) != 0 and len(json.loads(dumps(offline))) != 0:
        offline = db.find({"Terminal_id": terminal, "Status": "Disconnected"}).limit(1).sort("Date", -1)
        online = db.find({"Terminal_id": terminal, "Status": "Connected"}).limit(1).sort("Date", -1)
        if json.loads(dumps(online[0]))["Date"] > json.loads(dumps(offline[0]))["Date"]:
            data["online"].append(json.loads(dumps(online[0]))["Terminal_id"])
        else:
            data["offline"].append(json.loads(dumps(online[0]))["Terminal_id"])
    else:
        data["nolog"].append(terminal)
    return data


class fn_View_AllTerminals(MethodView):
    @cross_origin(supports_credentials=True)
    @swag_from('apidocs/AllTerminals.yaml', methods=['GET'])
    def get(self):
        try:
            All_data = Terminals.query.order_by(asc(Terminals.name)).all()
            terminalsSchema = Terminals_schema()
            terminalsSchema = Terminals_schema(many=True)
            output = terminalsSchema.dump(All_data)
            final_data_list = []
            for i in output:
                i['user_Count'] = len(User_terminals.Get_USers_by_TerminalID(i['id']))
                i["status"] = "active" if i["alpeta_terminal_id"] in terminal_status(i["alpeta_terminal_id"])["online"] \
                    else "inactive"
                final_data_list.append(i)
            respone = {"status": 'success', "message": "Success", "terminals": final_data_list}
            return make_response(jsonify(respone)), 200
        except Exception as e:
            response = {"status": 'error', "message": f'{str(e)}'}
            return make_response(jsonify(response)), 200

class fn_View_AllTerminals_Paginate(MethodView):
    @cross_origin(supports_credentials=True)
    @swag_from('apidocs/AllTerminalsPaginate.yaml', methods=['POST'])
    def post(self, page):
        try:
            request_data = request.get_json(force=True)
            search_status = request_data["search_status"]
            param_sort_code = request_data["sort_code"]
            param_name = request_data["name"]

            sort_code = "%{}%".format(param_sort_code)
            name = "%{}%".format(param_name)
            if search_status == True:
                if len(param_sort_code) != 0:
                    search_query = f"SELECT * FROM terminals WHERE status != 'delete' AND short_code ilike '%{param_sort_code}%'"
                    data = db.session.execute(search_query)
                    TerminalSchema = Terminals_schema(many=True)
                    output = TerminalSchema.dump(data)
                    final_data_list = []
                    for i in output:
                        i['user_Count'] = len(User_terminals.Get_USers_by_TerminalID(i['id']))
                        i["status"] = "active" if i["alpeta_terminal_id"] in terminal_status(i["alpeta_terminal_id"])["online"] \
                    else "inactive"
                        final_data_list.append(i)
                    respone = {
                        "status": 'success',
                        "message": "Success",
                        "count": len(final_data_list),
                        "terminals": Paginate(final_data_list, page)}
                    return make_response(jsonify(respone)), 200
                if len(param_name) != 0:
                    # "SELECT * FROM users WHERE users.status != 'delete' AND users.role_id = 3 AND users.full_name ilike '%dilip%'"
                    # search_query = Terminals.query.filter(Terminals.status != 'delete',Terminals.name.like(name)).all()
                    search_query = f"SELECT * FROM terminals WHERE status != 'delete' AND name ilike '%{param_name}%'"
                    data = db.session.execute(search_query)
                    TerminalSchema = Terminals_schema(many=True)
                    output = TerminalSchema.dump(data)
                    final_data_list = []
                    for i in output:
                        i['user_Count'] = len(User_terminals.Get_USers_by_TerminalID(i['id']))
                        i["status"] = "active" if i["alpeta_terminal_id"] in terminal_status(i["alpeta_terminal_id"])["online"] \
                    else "inactive"
                        final_data_list.append(i)
                    respone = {
                        "status": 'success',
                        "message": "Success",
                        "SearchCount": len(final_data_list),
                        "terminals": Paginate(final_data_list, page)}
                    return make_response(jsonify(respone)), 200
            elif search_status==False:
                All_data = Terminals.query.order_by(asc(Terminals.name)).all()
                terminalsSchema = Terminals_schema(many=True)
                output = terminalsSchema.dump(All_data)
                final_data_list = []
                for i in output:
                    i['user_Count'] = len(User_terminals.Get_USers_by_TerminalID(i['id']))
                    i["status"] = "active" if i["alpeta_terminal_id"] in terminal_status(i["alpeta_terminal_id"])["online"] \
                    else "inactive"
                    final_data_list.append(i)
                respone = {"status": 'success', "message": "Success","count":len(final_data_list),
                           "terminals": Paginate(final_data_list, page)}
                return make_response(jsonify(respone)), 200
            else:
                respone = {"status": 'error', "message": "key 'Success' must ne True or Flase"}
                return make_response(jsonify(respone)), 200
        except Exception as e:
            response = {"status": 'error', "message": f'{str(e)}'}
            return make_response(jsonify(response)), 200

class fn_Create_Terminals(MethodView):
    @cross_origin(supports_credentials=True)
    @swag_from('apidocs/CreateTerminals.yaml', methods=['POST'])
    def post(self):
        try:
            request_data = request.get_json(force=True)
            query = Terminals.query.filter_by(name=request_data["name"]).first()
            if query is None:
                # name, alpeta_terminal_id, short_code, terminal_type, description, status,
                data = Terminals.Add_terminals(request_data['name'],
                                               request_data['alpeta_terminal_id'],
                                               request_data['short_code'],
                                               request_data['terminal_type'],
                                               request_data['description'],
                                               request_data['status'])
                #Users_log.add_user_log(user_id=None,alpeta_user_id=None,log_desc="Terminal created successfully",
                #                      type="Terminals",status="success")
                respone = {"status": 'success', "message": "Terminal created successfully", "terminals": data}
                return make_response(jsonify(respone)), 200
            else:
                respone = {"status": 'error', "message": "Terminals Name already exists"}
                return make_response(jsonify(respone)), 200
        except Exception as e:
            #Users_log.add_user_log(user_id=None, alpeta_user_id=None, log_desc=f'{str(e)}',
            #                      type="Terminals",status="error")
            response = {"status": 'error', "message": f'{str(e)}'}
            return make_response(jsonify(response)), 200

class fn_Update_Terminals(MethodView):
    @cross_origin(supports_credentials=True)
    @swag_from('apidocs/UpdateTerminals.yaml', methods=['POST'])
    def post(self):
        try:
            request_data = request.get_json(force=True)
            # _id, name, alpeta_terminal_id, short_code, terminal_type, description,
            data = Terminals.Update_Terminals(request_data['id'], request_data['name'],
                                              request_data['alpeta_terminal_id'],
                                              request_data['short_code'],
                                              request_data['terminal_type'],
                                              request_data['description'])
            #Users_log.add_user_log(user_id=None, alpeta_user_id=None, log_desc="Terminal updated successfully",
            #                       type="Terminals", status="success")
            respone = {"status": 'success', "message": "Terminals updated successfully", "terminals": data}
            return make_response(jsonify(respone)), 200
        except Exception as e:
            # Users_log.add_user_log(user_id=None, alpeta_user_id=None, log_desc=f'{str(e)}',
            #                        type="Terminals", status="error")
            response = {"status": 'error', "message": f'{str(e)}'}
            return make_response(jsonify(response)), 200

class fn_Update_Terminals_Status(MethodView):
    @cross_origin(supports_credentials=True)
    @swag_from('apidocs/UpdateTerminalsStatus.yaml', methods=['POST'])
    def post(self):
        try:
            request_data = request.get_json(force=True)
            data = Terminals.Change_Status(request_data['id'], request_data['status'])
            #Users_log.add_user_log(user_id=None, alpeta_user_id=None, log_desc="Terminal Status updated successfully",
            #                       type="Terminals", status="success")
            respone = {"status": 'success', "message": "Terminals Status updated successfully", "terminals": data}
            return make_response(jsonify(respone)), 200
        except Exception as e:
            #Users_log.add_user_log(user_id=None, alpeta_user_id=None, log_desc=f'{str(e)}',
            #                       type="Terminals", status="error")
            response = {"status": 'error', "message": f'{str(e)}'}
            return make_response(jsonify(response)), 200

class fn_Delete_Terminals(MethodView):
    @cross_origin(supports_credentials=True)
    @swag_from('apidocs/DeleteTerminals.yaml', methods=['POST'])
    def post(self):
        try:
            request_data = request.get_json(force=True)
            data = Terminals.Delete(request_data['id'])
            # Users_log.add_user_log(user_id=None, alpeta_user_id=None, log_desc="Terminal Deleted successfully",
            #                        type="Terminals", status="success")
            respone = {"status": 'success', "message": "Terminal Deleted successfully", "terminals": data}
            return make_response(jsonify(respone)), 200
        except Exception as e:
            # Users_log.add_user_log(user_id=None, alpeta_user_id=None, log_desc=f'{str(e)}',
            #                        type="Terminals", status="error")
            response = {"status": 'error', "message": f'{str(e)}'}
            return make_response(jsonify(response)), 200

class fn_SearchTerminals(MethodView):
    @cross_origin(supports_credentials=True)
    @swag_from('apidocs/SearchTerminals.yaml', methods=['POST'])
    def post(self, page):
        try:
            request_data = request.get_json(force=True)
            sort_code = "%{}%".format(request_data["sort_code"])
            name = "%{}%".format(request_data["name"])
            if sort_code is not None:
                search_query = Terminals.query.filter(Terminals.status != 'delete',
                                                      Terminals.short_code.like(sort_code)).all()
                TerminalSchema = Terminals_schema(many=True)
                output = TerminalSchema.dump(search_query)
                respone = {
                    "status": 'success',
                    "message": "Success",
                    "SearchCount": len(output),
                    "terminals": Paginate(output, page)}
                return make_response(jsonify(respone)), 200
            elif name is not None:
                search_query = Terminals.query.filter(Terminals.status != 'delete', Terminals.name.like(name)).all()
                TerminalSchema = Terminals_schema(many=True,
                                   type="Terminals", status="success")
                output = TerminalSchema.dump(search_query)
                respone = {
                    "status": 'success',
                    "message": "Success",
                    "SearchCount": len(output),
                    "terminals": Paginate(output, page)}
                return make_response(jsonify(respone)), 200
            else:
                respone = {"status": 'error', "message": "error"}
                return make_response(jsonify(respone)), 200

            # data = Users.query.filter(Users.role_id == int(request_data["role_id"]),
            #                           or_(Users.employee_id.like(request_data["employee_id"]),
            #                                 Users.full_name.like(request_data["name"]),
            #                               Users.alpeta_user_id.like(request_data["alpeta_user_id"])
            #                               ))
            # Userschema = User_schema(many=True)
            # output = Userschema.dump(data)
            # respone = {"status": 'success', "message": "success", "Users": output}
            # return make_response(jsonify(respone)), 200
        except Exception as e:
            response = {"status": 'error', "message": f'{str(e)}'}
            return make_response(jsonify(response)), 200


# # # Creating View Function/Resources
fn_View_AllTerminals_Paginate = fn_View_AllTerminals_Paginate.as_view("fn_View_AllTerminals_Paginate")
fn_View_AllTerminals = fn_View_AllTerminals.as_view("fn_View_AllTerminals")
fn_Create_Terminals = fn_Create_Terminals.as_view("fn_Create_Terminals")
fn_Update_Terminals = fn_Update_Terminals.as_view("fn_Update_Shifts")
fn_Update_Terminals_Status = fn_Update_Terminals_Status.as_view("fn_Update_Shifts_Status")
fn_Delete_Terminals = fn_Delete_Terminals.as_view("fn_Delete_Shifts")
fn_SearchTerminals = fn_SearchTerminals.as_view("fn_SearchTerminals")

# # # adding routes to the Views we just created
Terminals_view.add_url_rule('/all_terminals', view_func=fn_View_AllTerminals, methods=['GET'])
Terminals_view.add_url_rule('/all_terminals/<page>', view_func=fn_View_AllTerminals_Paginate, methods=['POST'])
Terminals_view.add_url_rule('/create_terminals', view_func=fn_Create_Terminals, methods=['POST'])
Terminals_view.add_url_rule('/update_terminals', view_func=fn_Update_Terminals, methods=['POST'])
Terminals_view.add_url_rule('/update_terminals_status', view_func=fn_Update_Terminals_Status, methods=['POST'])
Terminals_view.add_url_rule('/delete_terminals', view_func=fn_Delete_Terminals, methods=['POST'])
Terminals_view.add_url_rule('/search_terminals/<page>', view_func=fn_SearchTerminals, methods=['POST'])
